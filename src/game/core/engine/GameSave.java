package game.core.engine;

import game.api.FieldObject;
import game.map.Cell;
import game.map.Field;
import game.model.building.onmap.Castle;
import game.model.hero.ComputerHero;
import game.model.hero.HumanHero;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class GameSave {
    public ComputerHero computerHero;
    public HumanHero humanHero;
    public Castle castlePlayer;
    public Castle castleComputer;
    public String saveName;
    public Field field;
    public String ownerName;


    public GameSave() {}

    public GameSave(ComputerHero cHero, HumanHero hHero, Castle cPlayer, Castle cComp, Field oField, String name, String pOwnerName) {
        this.computerHero = cHero;
        this.humanHero = hHero;
        this.castlePlayer = cPlayer;
        this.castleComputer = cComp;
        this.field = oField;
        this.ownerName = pOwnerName;
    }

    public static void saveGame(GameSave saveData, String slotName) {
        try {
            File dir = new File("saves");
            if (!dir.exists()) dir.mkdirs();

            File file = new File(dir, slotName + ".txt");
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {

                // üëâ 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
                writer.write(slotName + ";" + saveData.ownerName);
                writer.newLine();

                // üëâ 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª—è
                Field field = saveData.field;
                writer.write(field.getWidth() + ";" + field.getHeight());
                writer.newLine();

                // üëâ 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É –ø–æ–ª—è
                for (int x = 0; x < field.getWidth(); x++) {
                    for (int y = 0; y < field.getHeight(); y++) {
                        Cell cell = field.getCell(x, y);
                        writer.write(cell.serialize());
                        writer.newLine();
                    }
                }

                // üëâ 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–∫–∏
                writer.write(saveData.castlePlayer.serialize());
                writer.newLine();
                writer.write(saveData.castleComputer.serialize());
                writer.newLine();

                // üëâ 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ—Ä–æ–µ–≤
                writer.write(saveData.humanHero.serialize());
                writer.newLine();
                writer.write(saveData.computerHero.serialize());
                writer.newLine();

                System.out.println("‚úÖ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–ª–æ—Ç " + slotName);
            }
        } catch (IOException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + e.getMessage());
        }
    }


    public GameSave loadGame(String slotName) {
        try {
            File file = new File("saves", slotName + ".txt");
            BufferedReader reader = new BufferedReader(new FileReader(file));

            // 1. –ò–º—è –∏ –≤–ª–∞–¥–µ–ª–µ—Ü
            String[] meta = reader.readLine().split(";");
            String saveName = meta[0];
            String ownerName = meta[1];

            // 2. –†–∞–∑–º–µ—Ä—ã –ø–æ–ª—è
            String[] dims = reader.readLine().split(";");
            int width = Integer.parseInt(dims[0]);
            int height = Integer.parseInt(dims[1]);

            // 3. –°—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –ø–æ–ª—è (width * height —Å—Ç—Ä–æ–∫)
            List<String> cellLines = new ArrayList<>();
            for (int i = 0; i < width * height; i++) {
                cellLines.add(reader.readLine());
            }

            // 4. –ß—Ç–µ–Ω–∏–µ –∑–∞–º–∫–æ–≤
            String castlePlayerData = reader.readLine();
            String castleComputerData = reader.readLine();

            // 5. –ß—Ç–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤
            String humanData = reader.readLine();
            String computerData = reader.readLine();

            // 6. –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è
            field = new Field(width, height);

            // 7. –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–∫–æ–≤ (—Å –ø–æ–ª–µ–º)
            castlePlayer = Castle.deserialize(castlePlayerData, field);
            castleComputer = Castle.deserialize(castleComputerData, field);


            // 8. –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–µ—Ä–æ–µ–≤ (—Å –ø–æ–ª–µ–º + –∑–∞–º–∫–∞–º–∏)
            humanHero = HumanHero.deserialize(humanData, field, castlePlayer);
            computerHero = ComputerHero.deserialize(computerData, field, castleComputer);

            // 9. –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–ª–µ—Ç–∫–∏
            int index = 0;
            for (int x = 0; x < width; x++) {
                for (int y = 0; y < height; y++) {
                    Cell cell = Cell.deserialize(
                            cellLines.get(index++),
                            field,
                            castlePlayer,
                            castleComputer,
                            computerHero,
                            humanHero
                    );
                    field.getCell(x, y).getObjects().clear(); // –æ—á–∏—Å—Ç–∫–∞ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é
                    for (FieldObject obj : cell.getObjects()) {
                        field.getCell(x, y).addObject(obj);
                    }
                    field.getCell(x, y).setTerrainType(cell.getTerrainType());
                }
            }

            reader.close();
            System.out.println("‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Å–ª–æ—Ç–∞ " + slotName);

            return new GameSave(computerHero, humanHero, castlePlayer, castleComputer, field, saveName, ownerName);
        } catch (IOException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: " + e.getMessage());
            return null;
        }
    }



}