package game.interf;

import game.api.FieldObject;
import game.api.Position;
import game.map.Cell;
import game.map.Field;
import game.map.TerrainType;
import game.model.building.onmap.Castle;
import game.model.building.onmap.GoldCave;

import java.io.*;
import java.util.Scanner;

public class MapEditor {
    private static final Scanner scanner = new Scanner(System.in);

    public static Field editMap(int width, int height) {
        Field field = new Field(width, height);

        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–≤–æ–π
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                field.getCell(x, y).setTerrainType(TerrainType.GRASS);
            }
        }

        int castlesPlaced = 0;
        int cavesPlaced = 0;

        while (true) {
            System.out.println("\n–†–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ä—Ç—ã:");
            System.out.println("1. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏");
            System.out.println("2. –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–º–æ–∫ (–º–∞–∫—Å. 2)");
            System.out.println("3. –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–æ–ª–æ—Ç—É—é –ø–µ—â–µ—Ä—É (–º–∞–∫—Å. 3)");
            System.out.println("4. –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç—ã");
            System.out.println("5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –∏ –≤—ã–π—Ç–∏");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            String choice = scanner.nextLine().trim();

            switch (choice) {
                case "1" -> setTerrain(field);
                case "2" -> {
                    if (castlesPlaced >= 2) {
                        System.out.println("‚ùó –£–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ 2 –∑–∞–º–∫–∞.");
                        break;
                    }

                    Position pos = readPosition(width, height);
                    if (!field.getCell(pos.x(), pos.y()).isEmpty()) {
                        System.out.println("‚ùó –Ø—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞.");
                        break;
                    }

                    System.out.println("–≠—Ç–æ –∑–∞–º–æ–∫ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞?");
                    System.out.println("1 ‚Äî –ò–≥—Ä–æ–∫ (—Å–∏–Ω–∏–π)");
                    System.out.println("2 ‚Äî –ö–æ–º–ø—å—é—Ç–µ—Ä (–∫—Ä–∞—Å–Ω—ã–π)");
                    System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");
                    String ownerInput = scanner.nextLine().trim();

                    String colorCode = "\u001B[34;47m";
                    switch (ownerInput) {
                        case "1" -> colorCode = "\u001B[34;47m"; // —Å–∏–Ω–∏–π ‚Äî –∏–≥—Ä–æ–∫
                        case "2" -> colorCode = "\u001B[31;47m"; // –∫—Ä–∞—Å–Ω—ã–π ‚Äî –∫–æ–º–ø—å—é—Ç–µ—Ä
                        default -> {
                            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–º–∫–∞.");
                            break;
                        }
                    }

                    field.getCell(pos.x(), pos.y()).addObject(new Castle(pos, colorCode, 2000, field));
                    castlesPlaced++;
                    System.out.println("‚úÖ –ó–∞–º–æ–∫ —Ä–∞–∑–º–µ—â—ë–Ω.");
                }

                case "3" -> {
                    if (cavesPlaced >= 3) {
                        System.out.println("‚ùó –£–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ 3 –ø–µ—â–µ—Ä—ã.");
                        break;
                    }
                    Position pos = readPosition(width, height);
                    if (field.getCell(pos.x(), pos.y()).isEmpty()) {
                        field.getCell(pos.x(), pos.y()).addObject(new GoldCave(pos, 500));
                        cavesPlaced++;
                        System.out.println("‚úÖ –ü–µ—â–µ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞.");
                    } else {
                        System.out.println("‚ùó –Ø—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞.");
                    }
                }
                case "4" -> field.render();
                case "5" -> {
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ");
                    String filename = scanner.nextLine().trim();
                    saveCustomMap(field, filename);
                    System.out.println("‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ " + filename);
                    return field;
                }
                default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }

    private static void setTerrain(Field field) {
        Position pos = readPosition(field.getWidth(), field.getHeight());
        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: GRASS, WATER, MOUNTAIN, FOREST");
        String input = scanner.nextLine().trim().toUpperCase();

        try {
            TerrainType type = TerrainType.valueOf(input);
            field.getCell(pos.x(), pos.y()).setTerrainType(type);
            System.out.println("‚úÖ –¢–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω—ë–Ω.");
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏.");
        }
    }

    private static Position readPosition(int width, int height) {
        int x = -1, y = -1;
        while (true) {
            try {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ X (0-" + (width - 1) + "): ");
                x = Integer.parseInt(scanner.nextLine().trim());
                System.out.print("–í–≤–µ–¥–∏—Ç–µ Y (0-" + (height - 1) + "): ");
                y = Integer.parseInt(scanner.nextLine().trim());

                if (x >= 0 && x < width && y >= 0 && y < height) {
                    return new Position(x, y);
                }
                System.out.println("‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.");
            } catch (NumberFormatException e) {
                System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.");
            }
        }
    }

    public static Field loadCustomMap(File file) {
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String[] dims = reader.readLine().split(";");
            int width = Integer.parseInt(dims[0]);
            int height = Integer.parseInt(dims[1]);

            Field field = new Field(width, height);

            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    String cellData = reader.readLine();
                    // –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ field, —Ç.–∫. –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (castlePlayer –∏ —Ç.–ø.) –º–æ–≥—É—Ç –±—ã—Ç—å null
                    Cell cell = Cell.deserialize(cellData, field, null, null, null, null);
                    field.getCell(x, y).setTerrainType(cell.getTerrainType());
                    for (FieldObject obj : cell.getObjects()) {
                        field.getCell(x, y).addObject(obj);
                    }
                }
            }

            return field;
        } catch (IOException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞—Ä—Ç—ã: " + e.getMessage());
            return null;
        }
    }

    public static void editExistingField(Field field) {
        int width = field.getWidth();
        int height = field.getHeight();

        while (true) {
            System.out.println("\n–†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã:");
            System.out.println("1. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏");
            System.out.println("2. –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç—ã");
            System.out.println("3. –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞");
            System.out.println("4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É –≤ custom_maps");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            String choice = scanner.nextLine().trim();

            switch (choice) {
                case "1" -> setTerrain(field);
                case "2" -> field.render();
                case "3" -> {
                    System.out.println("üö™ –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–∞—Ä—Ç—ã.");
                    return;
                }
                case "4" -> {
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ");
                    String filename = scanner.nextLine().trim();
                    saveCustomMap(field, filename);
                    System.out.println("‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ " + filename);
                }
                default -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.");
            }
        }
    }


    public static void saveCustomMap(Field field, String filename) {
        File dir = new File("custom_maps");
        if (!dir.exists()) dir.mkdirs();

        File file = new File(dir, filename + ".map");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            writer.write(field.getWidth() + ";" + field.getHeight());
            writer.newLine();
            for (int y = 0; y < field.getHeight(); y++) {
                for (int x = 0; x < field.getWidth(); x++) {
                    Cell cell = field.getCell(x, y);
                    writer.write(cell.serialize());
                    writer.newLine();
                }
            }
        } catch (IOException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã: " + e.getMessage());
        }
    }
}
