package game.interf;

import game.api.Position;
import game.map.Field;
import game.model.hero.*;

import java.util.List;
import java.util.ArrayList;


public class BuyHeroesMenu extends Inter {

    public BuyHeroesMenu() { }

    @Override
    public void display() {
        System.out.println("\n" +
                "  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n" +
                "  ‚ïë" + BOLD + GREEN + "             üßù –ú–ï–ù–Æ –ù–ê–ô–ú–ê –ì–ï–†–û–ï–í              " + RESET + "     ‚ïë\n" +
                "  ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n" +
                "  ‚ïë " + YELLOW + "1. " + CYAN + "–≠–ª—å—Ñ (120 –∑–æ–ª–æ—Ç–∞)" + RESET + "                               ‚ïë\n" +
                "  ‚ïë " + YELLOW + "2. " + CYAN + "–û—Ä–∫ (100 –∑–æ–ª–æ—Ç–∞)" + RESET + "                                ‚ïë\n" +
                "  ‚ïë " + YELLOW + "3. " + CYAN + "–ì–Ω–æ–º (90 –∑–æ–ª–æ—Ç–∞)" + RESET + "                                ‚ïë\n" +
                "  ‚ïë " + YELLOW + "4. " + CYAN + "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" + RESET + "                                    ‚ïë\n" +
                "  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");
    }

    public int handleInput(HumanHero player) {
        int choice = super.handleInput();
        clearConsole();

        Runnable showGold = () -> System.out.println(BOLD + GOLD_COLOR + "üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: " + player.getGold() + RESET + "\n");
        Field field = player.getMyCastle().getField();

        switch (choice) {
            case 1: // –≠–ª—å—Ñ
                if (player.noHaveMoney(120)) {
                    showGold.run();
                    System.out.println(RED + "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –Ω–∞–π–º–∞ —ç–ª—å—Ñ–∞!" + RESET);
                    break;
                }

                Position castlePos = player.getMyCastle().getPosition();
                Position spawnPos = field.findFreeAdjacent(castlePos);

                if (spawnPos != null) {
                    PurchasableHero elf = new ElfHero(spawnPos, player.getDirection(), GREEN, player.getMyCastle(), 3, 6, 120, player);
                    field.getCell(spawnPos.x(), spawnPos.y()).addObject(elf);
                    field.addHeroToAll(elf);
                    player.spendMoney(120);
                    showGold.run();
                    System.out.println(GREEN + "üßù –≠–ª—å—Ñ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–π –∞—Ä–º–∏–∏!" + RESET);
                } else {
                    System.out.println(RED + "‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å –∑–∞–º–∫–æ–º!" + RESET);
                }
                break;

            case 2: // –û—Ä–∫
                if (player.noHaveMoney(100)) {
                    showGold.run();
                    System.out.println(RED + "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –Ω–∞–π–º–∞ –æ—Ä–∫–∞!" + RESET);
                    break;
                }

                castlePos = player.getMyCastle().getPosition();
                spawnPos = field.findFreeAdjacent(castlePos);

                if (spawnPos != null) {
                    PurchasableHero orc = new OrcHero(spawnPos, player.getDirection(), GREEN, player.getMyCastle(), 2, 5, 100, player);
                    field.getCell(spawnPos.x(), spawnPos.y()).addObject(orc);
                    field.addHeroToAll(orc);
                    player.spendMoney(100);
                    showGold.run();
                    System.out.println(GREEN + "üí¢ –û—Ä–∫ –≥–æ—Ç–æ–≤ –∫ –±–æ—é!" + RESET);
                } else {
                    System.out.println(RED + "‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å –∑–∞–º–∫–æ–º!" + RESET);
                }
                break;

            case 3: // –ì–Ω–æ–º
                if (player.noHaveMoney(90)) {
                    showGold.run();
                    System.out.println(RED + "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –Ω–∞–π–º–∞ –≥–Ω–æ–º–∞!" + RESET);
                    break;
                }

                castlePos = player.getMyCastle().getPosition();
                spawnPos = field.findFreeAdjacent(castlePos);

                if (spawnPos != null) {
                    PurchasableHero dwarf = new DwarfHero(spawnPos, player.getDirection(), GREEN, player.getMyCastle(), 1, 4, 90, player);
                    field.getCell(spawnPos.x(), spawnPos.y()).addObject(dwarf);
                    field.addHeroToAll(dwarf);
                    player.spendMoney(90);
                    showGold.run();
                    System.out.println(GREEN + "‚õèÔ∏è –ì–Ω–æ–º –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!" + RESET);
                } else {
                    System.out.println(RED + "‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å –∑–∞–º–∫–æ–º!" + RESET);
                }
                break;


            case 4:
                System.out.println(CYAN + "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –∑–∞–º–∫–æ–≤–æ–µ –º–µ–Ω—é..." + RESET);
                break;

            default:
                showGold.run();
                System.out.println(RED + "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." + RESET);
        }
        return choice;
    }

}
