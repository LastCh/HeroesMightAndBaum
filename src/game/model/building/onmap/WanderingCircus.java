package game.model.building.onmap;

import game.api.Position;
import game.map.Field;
import game.model.hero.HumanHero;
import game.model.hero.ServiceVisitor;
import game.service.CircusBattleTask;
import game.service.ServiceType;

import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;

public class WanderingCircus extends Enterprise {

    private final int ttlSeconds = ThreadLocalRandom.current().nextInt(120, 241);
    private long bornTime  = System.currentTimeMillis();
    private static final Scanner SC = new Scanner(System.in);


    public static final ServiceType WORK = new ServiceType(
            "–†–∞–±–æ—Ç–∞—Ç—å –≤ —Ü–∏—Ä–∫–µ", 5_000, 0,
            hero -> {
                int gold = ThreadLocalRandom.current().nextInt(10, 1000);
                hero.addGold(gold);
                System.out.println("üí∞ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ " + gold + " –∑–æ–ª–æ—Ç–∞!");
            }
    );



    public WanderingCircus(Position p, Field field) {
        super(p, "\uD83C\uDFAB"  , 3, field,
                0, 0, 60, 0
        );
    }

    @Override protected ServiceType randomService() { return WORK; }

    @Override public String getClassName() { return "WanderingCircus"; }


    @Override
    public synchronized void enter(ServiceVisitor v, ServiceType unused) {
        if (!(v instanceof HumanHero hero)) return;

        double fame = hero.getAllKarma();
        boolean highFame = fame > 1;

        if (highFame) {
            hero.spendMoney(200);
            System.out.println("üé™ –° –≤–∞—Å –≤–∑—è–ª–∏ 200 –∑–æ–ª–æ—Ç–∞ –∑–∞ \"–±–µ–∑–æ–±—Ä–∞–∑–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ\"!");
            System.out.println("üé™ –ê—Ä—Ç–∏—Å—Ç—ã —Ä–∞–∑–æ–∑–ª–∏–ª–∏—Å—å –∏ –Ω–∞–±—Ä–æ—Å–∏–ª–∏—Å—å –Ω–∞ –≤–∞—Å!");

            new Thread(new CircusBattleTask(hero, this)).start();
            return;
        }


        // –Ω–∏–∑–∫–∞—è —Å–ª–∞–≤–∞ ‚Äî –æ–±—ã—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        super.enter(hero, WORK);                   // 5 —Å–µ–∫, –∑–∞—Ç–µ–º –Ω–∞—á–∏—Å–ª—è–µ–º –∑–æ–ª–æ—Ç–æ
    }

    public boolean isExpired() {
        long alive = (System.currentTimeMillis() - bornTime) / 1000;
        return alive >= ttlSeconds && getCurrentVisitors().isEmpty();
    }

    @Override
    public int displayMenu() {
        System.out.println("\nüé™  –í—ã —É –±—Ä–æ–¥—è—á–µ–≥–æ —Ü–∏—Ä–∫–∞!");
        System.out.println("1) –†–∞–±–æ—Ç–∞—Ç—å (5 —Å–µ–∫)");
        System.out.println("2) –£–π—Ç–∏");
        System.out.print  ("–í–∞—à –≤—ã–±–æ—Ä: ");
        while (true) {
            String s = SC.nextLine().trim();
            if ("1".equals(s) || "2".equals(s)) return Integer.parseInt(s);
            System.out.print("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2: ");
        }
    }

}

